基于黑名单检测
Pass-3
测试为服务器端校验,查看源码发现对文件后缀名做了一系列处理
 
最后存储的文件名为随机生成+过滤后的上传文件后缀名
 
当把文件后缀改为.php. .的时候
 
 
文件的确可以被上传 但是变为无法识别的类型了
因此使用::$DATA,因为源码中对::$DATA也进行了替换过滤 使用双写来绕过
 
 
此时上传后发现文件后缀为php,成功绕过了过滤

Pass-4
查看源码发现过滤方式同Pass-3一样
但最后存储的文件名为上传文件的文件名
 
因此无法使用upload_file.php::$DA::$DATATA的双写方式上传
于是使用upload_file.php. .的方式上传
 
 

Pass-5
查看源码发现过滤中没有对大小写进行转换 因此只需要将后缀名php改成大小写混写即可
该操作只能在windows中使用 linux中严格区分大小写
  
 

Pass-7
查看源码发现过滤中没有对两侧空白进行处理 因此只需要在.php后面加上空格即可绕过过滤
 
 

Pass-8
查看源码发现过滤并没有截取最后的 . 后的值,并且发现上传成功的文件名是以上传的文件名命名
 因此只需要在后缀加上 .php.空格 即可 
 
 
Pass-11
查看源码发现对上传的文件名后缀进行了处理和空字符串替换
因此只需要在php中插入黑名单中的值即可
 
 

0x00截断绕过
Pass-12
 
使用0x00截断需要切换到5.2.17版本
查看源码发现过滤的基本不可绕过,但最后存储的路径可由get传参方式控制
 
文件名后缀就一个%00字节，可以截断某些函数对文件名的判断。在许多语言函数中，处理字符串的函数中0x00被认为是终止符。
例如：
    网站上传函数处理xxx.php%00.jpg时，首先后缀名是合法的jpg格式，可以上传，在保存文件时，遇到%00字符丢弃后面的jpg，文件后缀最终保存的后缀名为xxx.php

因此可以先上传一个有内容的文件但后缀是白名单内的后缀
再使用get传参的方式手动写入存入的文件名和后缀,后续加上%00让文件最终保存时提前截断,达到上传文件最终存储是想要的后缀名的目的
 
 
白名单-文件包含漏洞(文件幻数检测绕过)
Pass-14
查看源码发现此处做了文件内容的文件幻数检测
 
 
此时可以制作一张图片马来实现绕过
在目录下打开cmd
 
输入 copy /b 1.jpg+2.php=3.jpg 即可生成对应文件
 
此时发现文件以生成
将该图片马上传至服务器端后

使用include.php即可执行上传中文件包含的php文件
 
若是写入的是eval($_POST[1]); 
也能同样使用该访问方式通过蚁剑连接
 

Pass-15
 
因此同14一样 只需要制作图片马 上传到服务器后用include.php进行文件包含的访问
 
 

条件竞争
Pass-18
审计源码发现是先上传后再校验,校验不匹配后再unlink删除文件
因此不论什么文件都会在上传目录保存一会
于是可以上传一个可以创建eval()的php文件,在其没有删除之前访问到该文件
 
于是分别抓取 上传可以创建php文件的php文件的包 和 访问上传的php文件的包
 
 
发送到intruder  设置好次数和线程(电脑过好不容易跑出,多加线程)
 
 
 
 
此时访问php文件的包出现200状态码证明成功了
 
查看upload确认文件创建成功
 
再使用蚁剑就可以getshell了

.htaccess
Pass-4
.htaccess:
<FilesMatch "haha">   //找到文件名中有haha的文件，通匹配
SetHandler application/x-httpd-php  //设置解析器为php解析器
</FilesMatch>
在这个目录中文件名或后缀中带有haha的都用php解析器解析
 
思路：先上传一个.htaccess的文件，绝大部分都可直接使用，官方声称不算漏洞算性质
在上传一个有php内容的白名单文件
直接访问就可以将该文件以php的方式打开
(需要知道上传完之后的文件名 .htaccess中也需要匹配)
如何快速的判断操作系统是windows还是linux
在url访问文件时
Windows不区分大小写 
Linux区分大小写

作业
Pass-09
查看源码发现对后缀名做了一系列的过滤(包括htaccess)并且上传存储的文件名是追加过滤后的后缀名
但并未对::$DATA进行校验 因此可以使用::$DATA(也可使用文件包含)
 
 
将上传的包修改如图 并且开启phpstorm监听抓包查看
 
可以看到经过校验完毕后的$file_ext=.php::$DATA 说明已经成功绕过检测 
放包后文件上传成功
 
 
Pass-10
查看源码发现对后缀名做了一系列的过滤(包括htaccess)并且上传存储的文件名是上传时的文件名
 
可以尝试使用1.php.空格. 去绕过 (也可使用文件包含)
上传文件并抓包更改,在开启phpstorm监听抓包
 
 
可以发现跑完过滤后 文件后缀名为.php.空格 正好可以绕过黑名单检测并且写入的文件格式也可以正常解析,放包后文件上传成功
 
 
Pass-11
查看源码发现是对文件名中进行黑名单校验之后替换为空字符串 (包括htaccess)并且上传存储的文件名是上传文件的文件名
 
因此只要在上传文件的后缀名中插入黑名单中的值即可绕过 (也可使用文件包含)
上传文件并抓包更改,在开启phpstorm监听抓包
 
 
发现经过过滤后文件名变为php放包后文件上传成功
 
 
Pass-12
见上面的pass-12
Pass-13
查看源码,此处的上传存储路径为post传参可控 (也可使用文件包含)
因此可以使用0x00截断绕过
 
 
首先将phpstudy版本切换到最低
 
上传一个包含php内容的白名单文件,可以看到post路径也在此处
 
 
将路径进行hex转换添加00 可以发现转回后明显有个空格
 
 
 
复制到包中后发送 发现文件上传成功并且可以正常访问

Pass-14
见上面的pass-14
